41 2 0
38 1
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
22 64 272 264 252 0 \NUL
Part A Output                            
8 216 184 265 135 1 0
8 280 184 329 135 1 0
8 352 184 401 135 1 0
11 168 424 195 326 0 1
20 264 208 331 189 0
in_3
20 336 208 403 189 0
in_2
20 408 208 475 189 0
in_1
8 424 184 473 135 1 0
20 480 208 547 189 0
in_0
19 72 312 139 293 0
a_3
19 56 336 123 317 0
a_2
19 40 360 107 341 0
a_1
19 24 384 91 365 0
a_0
22 7 438 342 418 0 \NUL
Part A has 16 outputs because there are 2^4 cases.
22 448 472 592 452 0 \NUL
Place comments here
7 360 664 409 615 0 1
7 360 704 409 655 0 1
19 264 592 331 573 0
c_2
19 264 632 331 613 0
c_1
19 264 672 331 653 0
c_0
22 416 688 480 668 0 \NUL
SOP/POS
22 416 648 492 628 0 \NUL
NAND Only
22 416 608 484 588 0 \NUL
NOR Only
22 448 496 588 476 0 \NUL
describing the output
22 272 744 416 724 0 \NUL
Place comments here
22 272 768 412 748 0 \NUL
describing the output
22 280 32 653 12 0 \NUL
You are only permitted to modify or add text to this page.
22 280 56 605 36 0 \NUL
Your circuit must use senders and/or receivers to
22 280 80 538 60 0 \NUL
interface with these inputs and outputs.
7 472 360 521 311 0 1
7 544 360 593 311 0 1
7 616 360 665 311 0 1
19 408 392 475 373 0
b_2
19 480 392 547 373 0
b_1
19 552 392 619 373 0
b_0
7 360 624 409 575 0 1
22 64 136 616 116 0 \NUL
Input                                                                                                                                 
22 448 272 650 252 0 \NUL
Part B Output                            
22 272 552 473 532 0 \NUL
Part C Output                            
22 6 460 271 440 0 \NUL
Each of the 4 inputs can either be 0 or 1.
22 6 482 431 462 0 \NUL
The ouputs are the digits 0-9 and following that are the letters a-f.
22 6 506 326 486 0 \NUL
Each binary input has a hexadecimal equivalent.
22 6 529 255 509 0 \NUL
For example, 1001 is 9 and 1110 is e.
1 481 198 470 159
1 398 159 409 198
1 326 159 337 198
1 262 159 265 198
1 136 302 169 390
1 120 326 169 396
1 104 350 169 402
1 88 374 169 408
1 361 639 328 622
1 361 679 328 662
1 473 335 472 382
1 545 335 544 382
1 617 335 616 382
1 361 599 328 582
38 2
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
19 24 216 91 197 0
in_3
19 24 240 91 221 0
in_2
19 24 264 91 245 0
in_1
19 24 288 91 269 0
in_0
20 32 512 99 493 0
c_2
20 32 456 99 437 0
b_1
20 32 480 99 461 0
b_0
20 32 536 99 517 0
c_1
22 24 600 390 580 0 \NUL
these are only present so circuit simulates without error
22 24 624 291 604 0 \NUL
remove these once logic is implemented
22 32 184 262 164 0 \NUL
placeholder senders and receivers
20 32 560 99 541 0
c_0
20 32 432 99 413 0
b_2
22 209 350 645 330 0 \NUL
We suggest building each part on a new page using the -/+ buttons
38 3
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
19 9 203 76 184 0
in_3
19 9 227 76 208 0
in_2
19 9 251 76 232 0
in_1
19 9 275 76 256 0
in_0
22 6 145 52 125 0 \NUL
Part A:
22 7 438 342 418 0 \NUL
Part A has 16 outputs because there are 2^4 cases.
22 6 460 271 440 0 \NUL
Each of the 4 inputs can either be 0 or 1.
22 6 482 431 462 0 \NUL
The ouputs are the digits 0-9 and following that are the letters a-f.
22 6 506 326 486 0 \NUL
Each binary input has a hexadecimal equivalent.
22 6 529 255 509 0 \NUL
For example, 1001 is 9 and 1110 is e.
11 440 285 467 187 0 1
20 123 203 190 184 0
a_3
20 123 227 190 208 0
a_2
20 123 251 190 232 0
a_1
20 123 275 190 256 0
a_0
19 266 207 333 188 0
a_3
19 266 231 333 212 0
a_2
19 266 255 333 236 0
a_1
19 266 279 333 260 0
a_0
1 73 193 124 193
1 73 217 124 217
1 73 241 124 241
1 73 265 124 265
1 330 197 441 251
1 330 221 441 257
1 330 245 441 263
1 330 269 441 269
38 4
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
38 5
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
38 6
22 8 32 48 12 0 \NUL
Lab 1
22 8 64 81 44 0 \NUL
Gu, James
22 8 96 36 76 0 \NUL
jjgu
39 16777215
47 0
40 1 8 8
50 800 800
51 1 30
30
System
20
700
0
0
1
2
2
34
