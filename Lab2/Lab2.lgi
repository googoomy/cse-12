41 2 0
38 1
8 252 396 301 347 1 0
8 318 396 367 347 1 0
22 258 348 424 328 0 \NUL
Read Register 1 Address
8 432 396 481 347 1 0
8 498 396 547 347 1 0
22 438 348 604 328 0 \NUL
Read Register 2 Address
20 720 414 787 395 0
wadr_0
20 654 414 721 395 0
wadr_1
8 606 396 655 347 1 0
8 672 396 721 347 1 0
22 612 348 767 328 0 \NUL
Write Register Address
20 480 414 547 395 0
adr2_1
20 546 414 613 395 0
adr2_0
20 366 414 433 395 0
adr1_0
20 300 414 367 395 0
adr1_1
19 166 108 233 89 0
reg0_2
19 154 84 221 65 0
reg0_3
19 190 156 257 137 0
reg0_0
19 178 132 245 113 0
reg0_1
11 258 108 285 10 0 1
22 144 36 255 16 0 \NUL
Register 0 Value
19 322 108 389 89 0
reg1_2
19 310 84 377 65 0
reg1_3
19 346 156 413 137 0
reg1_0
19 334 132 401 113 0
reg1_1
11 414 108 441 10 0 1
22 300 36 411 16 0 \NUL
Register 1 Value
19 478 108 545 89 0
reg2_2
19 466 84 533 65 0
reg2_3
19 502 156 569 137 0
reg2_0
19 490 132 557 113 0
reg2_1
11 570 108 597 10 0 1
22 456 36 567 16 0 \NUL
Register 2 Value
19 634 108 701 89 0
reg3_2
19 622 84 689 65 0
reg3_3
19 658 156 725 137 0
reg3_0
19 646 132 713 113 0
reg3_1
11 726 108 753 10 0 1
22 612 36 723 16 0 \NUL
Register 3 Value
19 640 264 707 245 0
alu_2
19 628 240 695 221 0
alu_3
19 664 312 731 293 0
alu_0
19 652 288 719 269 0
alu_1
11 732 264 759 166 0 1
22 648 192 724 172 0 \NUL
ALU Output
25 12 528 119 432
8 12 396 61 347 1 0
8 6 288 55 239 1 1
8 6 192 55 143 1 1
20 66 414 133 395 0
sel
20 60 210 127 191 0
clear
20 150 510 217 491 0
kpad_3
20 138 534 205 515 0
kpad_2
20 132 558 199 539 0
kpad_1
20 120 582 187 563 0
kpad_0
19 328 264 395 245 0
in1_2
19 316 240 383 221 0
in1_3
19 352 312 419 293 0
in1_0
19 340 288 407 269 0
in1_1
11 420 264 447 166 0 1
22 336 192 414 172 0 \NUL
ALU Input 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 166 264 233 245 0
kpad_2
19 154 240 221 221 0
kpad_3
19 190 312 257 293 0
kpad_0
19 178 288 245 269 0
kpad_1
11 258 264 285 166 0 1
22 150 192 249 172 0 \NUL
Keypad Output
22 12 144 117 124 0 \NUL
Clear Registers
22 18 324 100 304 0 \NUL
Store Select
20 60 294 127 275 0
update
22 12 240 121 220 0 \NUL
Update Register
19 484 264 551 245 0
in2_2
19 472 240 539 221 0
in2_3
19 508 312 575 293 0
in2_0
19 496 288 563 269 0
in2_1
11 576 264 603 166 0 1
22 492 192 570 172 0 \NUL
ALU Input 2
22 18 348 230 328 0 \NUL
0 = Keypad input, 1 = ALU result
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 228 450 478 430 0 \NUL
Select clear to initialize registers to 0.
22 228 474 557 454 0 \NUL
Select store select to choose which value to store.
22 228 498 508 478 0 \NUL
Choose read and write register addresses.
22 228 522 727 502 0 \NUL
Read addresses = reg sources of ALU inputs, Write address = reg to save to
22 228 546 480 526 0 \NUL
Press update to save value to register
22 228 594 668 574 0 \NUL
You are only permitted to modify the header comment on this page.
1 652 371 655 404
1 718 371 721 404
1 478 371 481 404
1 544 371 547 404
1 364 371 367 404
1 298 371 301 404
1 218 74 259 74
1 259 80 230 98
1 259 86 242 122
1 259 92 254 146
1 374 74 415 74
1 415 80 386 98
1 415 86 398 122
1 415 92 410 146
1 530 74 571 74
1 571 80 542 98
1 571 86 554 122
1 571 92 566 146
1 686 74 727 74
1 727 80 698 98
1 727 86 710 122
1 727 92 722 146
1 692 230 733 230
1 733 236 704 254
1 733 242 716 278
1 733 248 728 302
1 61 200 52 167
1 67 404 58 371
1 380 230 421 230
1 421 236 392 254
1 421 242 404 278
1 421 248 416 302
1 151 500 116 500
1 139 524 116 506
1 133 548 116 512
1 121 572 116 518
1 218 230 259 230
1 259 236 230 254
1 259 242 242 278
1 259 248 254 302
1 61 284 52 263
1 536 230 577 230
1 577 236 548 254
1 577 242 560 278
1 577 248 572 302
38 2
22 294 42 484 22 0 \NUL
Placeholder signal/recievers
22 18 480 388 460 0 \NUL
These are only present so circuit simulates without error
22 18 504 290 484 0 \NUL
Remove these once logic is implemented
22 18 528 266 508 0 \NUL
You are permitted to modify this page
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 315 236 482 216 0 \NUL
Work starts on next page
38 3
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 277 129 344 110 0
kpad_3
19 277 153 344 134 0
sel
19 277 105 344 86 0
alu_3
14 325 180 374 131
31 400 159 449 74 0 2
20 469 123 536 104 0
in_3
19 277 239 344 220 0
kpad_2
19 279 263 346 244 0
sel
19 279 209 346 190 0
alu_2
14 325 290 374 241
31 401 269 450 184 0 2
20 470 233 537 214 0
in_2
19 278 351 345 332 0
kpad_1
19 280 375 347 356 0
sel
19 280 321 347 302 0
alu_1
14 329 402 378 353
31 402 381 451 296 0 2
20 471 345 538 326 0
in_1
19 281 463 348 444 0
kpad_0
19 281 487 348 468 0
sel
19 284 433 351 414 0
alu_0
14 326 514 375 465
31 406 493 455 408 0 2
20 475 457 542 438 0
in_0
22 13 143 99 123 0 \NUL
Store Select:
22 235 42 745 22 0 \NUL
I used 4 muxes to find out whether to do kpad or alu. One for each binary digit.
1 371 155 401 155
1 401 143 341 143
1 401 119 341 119
1 401 113 341 95
1 371 265 402 265
1 402 253 343 253
1 402 229 341 229
1 402 223 343 199
1 375 377 403 377
1 403 365 344 365
1 403 341 342 341
1 403 335 344 311
1 372 489 407 489
1 407 477 345 477
1 407 453 345 453
1 407 447 348 423
1 470 113 446 113
1 471 223 447 223
1 472 335 448 335
1 476 447 452 447
38 4
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
24 528 560 577 488 1 1 1
19 445 566 512 547 0
init
19 366 550 433 531 0
up0
20 623 518 690 499 0
reg0_0
15 455 515 504 466
19 369 518 436 499 0
in_0
24 532 125 581 53 1 1 1
19 459 132 526 113 0
init
19 366 109 433 90 0
up0
20 634 83 701 64 0
reg0_3
15 459 80 508 31
19 363 83 430 64 0
in_3
24 541 257 590 185 1 1 1
19 464 263 531 244 0
init
19 380 239 447 220 0
up0
20 636 215 703 196 0
reg0_2
15 468 212 517 163
19 380 215 447 196 0
in_2
24 531 423 580 351 1 1 1
19 455 429 522 410 0
init
19 369 413 436 394 0
up0
20 626 381 693 362 0
reg0_1
15 458 378 507 329
19 371 381 438 362 0
in_1
5 137 214 186 165 0
20 194 199 261 180 0
init
19 15 199 82 180 0
clear
22 13 143 154 123 0 \NUL
Register 0 and Clear:
22 12 305 199 285 0 \NUL
I used 4 fliflops per register.
22 10 331 430 311 0 \NUL
Each flip flop only updates the main page if the button is pushed
22 12 356 205 336 0 \NUL
Each flipflop is a binary digit.
1 509 556 542 556
1 529 526 430 540
1 574 508 624 508
1 501 490 542 490
1 523 122 546 121
1 533 91 430 99
1 578 73 635 73
1 505 55 546 55
1 528 253 555 253
1 542 223 444 229
1 587 205 637 205
1 514 187 555 187
1 519 419 545 419
1 532 389 433 403
1 577 371 627 371
1 504 353 545 353
1 533 73 427 73
1 542 205 444 205
1 532 371 435 371
1 529 508 433 508
1 183 189 195 189
1 138 189 79 189
38 5
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
24 519 120 568 48 1 1 1
19 444 126 511 107 0
init
19 379 107 446 88 0
up1
20 614 78 681 59 0
reg1_3
15 446 75 495 26
19 378 78 445 59 0
in_3
24 521 256 570 184 1 1 1
19 438 262 505 243 0
init
19 391 238 458 219 0
up1
20 616 214 683 195 0
reg1_2
15 448 211 497 162
19 389 214 456 195 0
in_2
24 524 382 573 310 1 1 1
19 451 388 518 369 0
init
19 387 370 454 351 0
up1
20 619 340 686 321 0
reg1_1
15 451 337 500 288
19 388 340 455 321 0
in_1
24 521 519 570 447 1 1 1
19 444 525 511 506 0
init
19 408 495 475 476 0
up1
20 616 477 683 458 0
reg1_0
15 448 474 497 425
19 410 471 477 452 0
in_0
22 13 143 88 123 0 \NUL
Register 1:
1 508 116 533 116
1 520 86 443 97
1 565 68 615 68
1 492 50 533 50
1 502 252 535 252
1 522 222 455 228
1 567 204 617 204
1 494 186 535 186
1 515 378 538 378
1 525 348 451 360
1 570 330 620 330
1 497 312 538 312
1 508 515 535 515
1 522 485 472 485
1 567 467 617 467
1 494 449 535 449
1 520 68 442 68
1 522 204 453 204
1 525 330 452 330
1 522 467 474 461
38 6
24 528 560 577 488 1 1 1
19 447 566 514 547 0
init
19 366 550 433 531 0
up2
20 623 518 690 499 0
reg2_0
15 455 515 504 466
19 386 518 453 499 0
in_0
24 532 125 581 53 1 1 1
19 449 131 516 112 0
init
19 370 115 437 96 0
up2
20 625 83 692 64 0
reg2_3
15 459 80 508 31
19 378 83 445 64 0
in_3
24 541 257 590 185 1 1 1
19 461 263 528 244 0
init
19 379 247 446 228 0
up2
20 636 215 703 196 0
reg2_2
15 468 212 517 163
19 378 215 445 196 0
in_2
24 531 423 580 351 1 1 1
19 450 429 517 410 0
init
19 369 413 436 394 0
up2
20 626 381 693 362 0
reg2_1
15 458 378 507 329
19 367 381 434 362 0
in_1
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 13 143 88 123 0 \NUL
Register 2:
1 511 556 542 556
1 529 526 430 540
1 574 508 624 508
1 501 490 542 490
1 513 121 546 121
1 533 91 434 105
1 578 73 626 73
1 505 55 546 55
1 525 253 555 253
1 542 223 443 237
1 587 205 637 205
1 514 187 555 187
1 514 419 545 419
1 532 389 433 403
1 577 371 627 371
1 504 353 545 353
1 533 73 442 73
1 542 205 442 205
1 532 371 431 371
1 529 508 450 508
38 7
24 528 560 577 488 1 1 1
19 445 566 512 547 0
init
19 366 550 433 531 0
up3
20 623 518 690 499 0
reg3_0
15 455 515 504 466
19 370 518 437 499 0
in_0
24 532 125 581 53 1 1 1
19 446 131 513 112 0
init
19 370 115 437 96 0
up3
20 625 83 692 64 0
reg3_3
15 459 80 508 31
19 384 83 451 64 0
in_3
24 541 257 590 185 1 1 1
19 463 263 530 244 0
init
19 379 247 446 228 0
up3
20 636 215 703 196 0
reg3_2
15 468 212 517 163
19 380 215 447 196 0
in_2
24 531 423 580 351 1 1 1
19 453 429 520 410 0
init
19 369 413 436 394 0
up3
20 626 381 693 362 0
reg3_1
15 458 378 507 329
19 375 381 442 362 0
in_1
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 13 143 88 123 0 \NUL
Register 3:
1 509 556 542 556
1 529 526 430 540
1 574 508 624 508
1 501 490 542 490
1 510 121 546 121
1 533 91 434 105
1 578 73 626 73
1 505 55 546 55
1 527 253 555 253
1 542 223 443 237
1 587 205 637 205
1 514 187 555 187
1 517 419 545 419
1 532 389 433 403
1 577 371 627 371
1 504 353 545 353
1 533 73 448 73
1 542 205 444 205
1 532 371 439 371
1 529 508 434 508
38 8
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 226 144 293 125 0
update
20 539 175 606 156 0
up0
19 223 215 290 196 0
wadr_0
5 308 190 357 141 0
19 220 175 287 156 0
wadr_1
5 309 230 358 181 0
3 469 190 518 141 1 0
19 221 359 288 340 0
update
20 544 390 611 371 0
up2
19 219 419 286 400 0
wadr_0
5 299 435 348 386 0
19 219 390 286 371 0
wadr_1
3 464 405 513 356 1 0
19 223 245 290 226 0
update
20 542 276 609 257 0
up1
19 226 307 293 288 0
wadr_0
19 226 276 293 257 0
wadr_1
5 307 291 356 242 0
3 466 291 515 242 1 0
19 224 458 291 439 0
update
20 546 489 613 470 0
up3
19 224 517 291 498 0
wadr_0
19 225 489 292 470 0
wadr_1
3 467 504 516 455 1 0
22 13 143 198 123 0 \NUL
Write Register Select Logic:
22 226 50 634 30 0 \NUL
I used a sum of products to figure out which register to update.
22 226 76 432 56 0 \NUL
up0 being register 0 and so on.
1 470 151 290 134
1 470 165 354 165
1 470 179 355 205
1 540 165 515 165
1 465 366 285 349
1 300 410 283 409
1 545 380 510 380
1 467 252 287 235
1 308 266 290 266
1 543 266 512 266
1 468 465 288 448
1 547 479 513 479
1 467 266 353 266
1 290 297 467 280
1 309 165 284 165
1 310 205 287 205
1 465 380 283 380
1 465 394 345 410
1 468 479 289 479
1 288 507 468 493
38 9
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
20 447 74 514 55 0
in1_3
19 210 37 277 18 0
reg3_3
19 224 146 291 127 0
adr1_0
19 215 124 282 105 0
adr1_1
31 352 113 401 28 0 1
14 294 162 343 113
19 209 59 276 40 0
reg2_3
19 209 80 276 61 0
reg1_3
19 211 101 278 82 0
reg0_3
20 440 227 507 208 0
in1_2
19 204 192 271 173 0
reg3_2
19 206 300 273 281 0
adr1_0
19 208 277 275 258 0
adr1_1
31 345 266 394 181 0 1
14 293 318 342 269
19 204 213 271 194 0
reg2_2
19 202 234 269 215 0
reg1_2
19 204 255 271 236 0
reg0_2
20 447 378 514 359 0
in1_1
19 211 339 278 320 0
reg3_1
19 224 455 291 436 0
adr1_0
19 215 430 282 411 0
adr1_1
31 352 417 401 332 0 1
14 291 477 340 428
19 209 363 276 344 0
reg2_1
19 209 385 276 366 0
reg1_1
19 210 407 277 388 0
reg0_1
20 692 484 759 465 0
in1_0
19 420 443 487 424 0
reg3_0
19 434 549 501 530 0
adr1_0
19 425 527 492 508 0
adr1_1
31 597 523 646 438 0 1
14 535 581 584 532
19 419 464 486 445 0
reg2_0
19 420 485 487 466 0
reg1_0
19 422 506 489 487 0
reg0_0
22 13 143 124 123 0 \NUL
Read Address 1:
22 14 166 92 146 0 \NUL
ALU Input 1
22 477 123 779 103 0 \NUL
I used 4 muxes for each digit of the ALU input.
22 386 148 782 128 0 \NUL
Which register's digit to use is decided by the read address 
1 274 27 353 55
1 353 109 340 137
1 398 67 448 64
1 353 91 279 114
1 288 136 353 97
1 273 49 353 61
1 273 70 353 67
1 275 91 353 73
1 268 182 346 208
1 346 262 339 293
1 391 220 441 217
1 346 244 272 267
1 270 290 346 250
1 268 203 346 214
1 266 224 346 220
1 268 245 346 226
1 275 329 353 359
1 353 413 337 452
1 398 371 448 368
1 353 395 279 420
1 288 445 353 401
1 273 353 353 365
1 273 375 353 371
1 274 397 353 377
1 484 433 598 465
1 598 519 581 556
1 643 477 693 474
1 598 501 489 517
1 498 539 598 507
1 483 454 598 471
1 484 475 598 477
1 486 496 598 483
38 10
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
20 450 78 517 59 0
in2_3
19 210 32 277 13 0
reg3_3
19 222 143 289 124 0
adr2_0
19 215 121 282 102 0
adr2_1
31 352 113 401 28 0 1
14 294 162 343 113
19 209 54 276 35 0
reg2_3
19 209 75 276 56 0
reg1_3
19 210 98 277 79 0
reg0_3
20 440 230 507 211 0
in2_2
19 204 190 271 171 0
reg3_2
19 217 299 284 280 0
adr2_0
19 208 277 275 258 0
adr2_1
31 345 266 394 181 0 1
14 293 318 342 269
19 202 212 269 193 0
reg2_2
19 203 233 270 214 0
reg1_2
19 203 255 270 236 0
reg0_2
20 447 381 514 362 0
in2_1
19 220 342 287 323 0
reg3_1
19 224 449 291 430 0
adr2_0
19 215 428 282 409 0
adr2_1
31 352 417 401 332 0 1
14 291 477 340 428
19 211 363 278 344 0
reg2_1
19 209 384 276 365 0
reg1_1
19 211 405 278 386 0
reg0_1
20 693 487 760 468 0
in2_0
19 420 440 487 421 0
reg3_0
19 434 551 501 532 0
adr2_0
19 425 529 492 510 0
adr2_1
31 597 523 646 438 0 1
14 535 581 584 532
19 422 463 489 444 0
reg2_0
19 420 483 487 464 0
reg1_0
19 420 507 487 488 0
reg0_0
22 13 143 124 123 0 \NUL
Read Address 2:
22 14 166 92 146 0 \NUL
ALU Input 2
22 531 135 745 115 0 \NUL
Same thing just uses address 2.
1 274 22 353 55
1 353 109 340 137
1 398 67 451 68
1 353 91 279 111
1 286 133 353 97
1 273 44 353 61
1 273 65 353 67
1 274 88 353 73
1 268 180 346 208
1 346 262 339 293
1 391 220 441 220
1 346 244 272 267
1 281 289 346 250
1 266 202 346 214
1 267 223 346 220
1 267 245 346 226
1 284 332 353 359
1 353 413 337 452
1 398 371 448 371
1 353 395 279 418
1 288 439 353 401
1 275 353 353 365
1 273 374 353 371
1 275 395 353 377
1 484 430 598 465
1 598 519 581 556
1 643 477 694 477
1 598 501 489 519
1 498 541 598 507
1 486 453 598 471
1 484 473 598 477
1 484 497 598 483
38 11
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 359 144 426 125 0
in2_0
19 360 122 427 103 0
in2_1
19 363 51 430 32 0
in1_1
19 362 31 429 12 0
in1_0
19 364 92 431 73 0
in1_3
19 363 71 430 52 0
in1_2
20 670 90 737 71 0
alu_3
31 581 126 630 41 0 1
14 537 168 586 119
19 347 290 414 271 0
in2_0
19 348 268 415 249 0
in2_1
19 351 197 418 178 0
in1_0
19 350 177 417 158 0
in1_3
19 352 238 419 219 0
in1_2
19 351 217 418 198 0
in1_1
20 657 236 724 217 0
alu_2
31 569 272 618 187 0 1
14 515 315 564 266
19 334 433 401 414 0
in2_0
19 335 411 402 392 0
in2_1
19 338 340 405 321 0
in1_3
19 337 320 404 301 0
in1_2
19 339 381 406 362 0
in1_1
19 338 360 405 341 0
in1_0
20 645 379 712 360 0
alu_1
31 556 415 605 330 0 1
14 505 453 554 404
19 330 570 397 551 0
in2_0
19 331 548 398 529 0
in2_1
19 334 477 401 458 0
in1_2
19 333 457 400 438 0
in1_1
19 335 518 402 499 0
in1_0
19 334 497 401 478 0
in1_3
20 641 516 708 497 0
alu_0
31 552 552 601 467 0 1
14 501 590 550 541
22 13 143 93 123 0 \NUL
ALU Output:
22 12 192 243 172 0 \NUL
For the ALU output I used 4 muxes.
22 12 217 298 197 0 \NUL
The last two binary digits for ALU input 2 is 
22 14 242 242 222 0 \NUL
how much to rotate the ALU input 1
22 13 266 214 246 0 \NUL
For example, if input 1 is 1001
22 13 291 319 271 0 \NUL
the output will effectively be rotated 1 time (01)
22 12 314 260 294 0 \NUL
even if the actual rotation needs to be
22 11 337 136 317 0 \NUL
rotated nine times.
22 13 360 301 340 0 \NUL
For a 4 bit number, a 1 bit rotation results in
22 12 383 250 363 0 \NUL
the same number as a 9 bit rotation.
1 582 68 426 21
1 582 74 427 41
1 582 80 427 61
1 582 86 428 82
1 671 80 627 80
1 583 143 582 122
1 424 112 582 104
1 582 110 423 134
1 570 214 414 167
1 570 220 415 187
1 570 226 415 207
1 570 232 416 228
1 658 226 615 226
1 561 290 570 268
1 412 258 570 250
1 570 256 411 280
1 557 357 401 310
1 557 363 402 330
1 557 369 402 350
1 557 375 403 371
1 646 369 602 369
1 551 428 557 411
1 399 401 557 393
1 557 399 398 423
1 553 494 397 447
1 553 500 398 467
1 553 506 398 487
1 553 512 399 508
1 642 506 598 506
1 547 565 553 548
1 395 538 553 530
1 553 536 394 560
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
