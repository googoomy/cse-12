41 2 0
38 1
8 252 396 301 347 1 0
8 318 396 367 347 1 0
22 258 348 424 328 0 \NUL
Read Register 1 Address
8 432 396 481 347 1 0
8 498 396 547 347 1 0
22 438 348 604 328 0 \NUL
Read Register 2 Address
20 720 414 787 395 0
wadr_0
20 654 414 721 395 0
wadr_1
8 606 396 655 347 1 0
8 672 396 721 347 1 0
22 612 348 767 328 0 \NUL
Write Register Address
20 480 414 547 395 0
adr2_1
20 546 414 613 395 0
adr2_0
20 366 414 433 395 0
adr1_0
20 300 414 367 395 0
adr1_1
19 166 108 233 89 0
reg0_2
19 154 84 221 65 0
reg0_3
19 190 156 257 137 0
reg0_0
19 178 132 245 113 0
reg0_1
11 258 108 285 10 0 1
22 144 36 255 16 0 \NUL
Register 0 Value
19 322 108 389 89 0
reg1_2
19 310 84 377 65 0
reg1_3
19 346 156 413 137 0
reg1_0
19 334 132 401 113 0
reg1_1
11 414 108 441 10 0 1
22 300 36 411 16 0 \NUL
Register 1 Value
19 478 108 545 89 0
reg2_2
19 466 84 533 65 0
reg2_3
19 502 156 569 137 0
reg2_0
19 490 132 557 113 0
reg2_1
11 570 108 597 10 0 1
22 456 36 567 16 0 \NUL
Register 2 Value
19 634 108 701 89 0
reg3_2
19 622 84 689 65 0
reg3_3
19 658 156 725 137 0
reg3_0
19 646 132 713 113 0
reg3_1
11 726 108 753 10 0 1
22 612 36 723 16 0 \NUL
Register 3 Value
19 640 264 707 245 0
alu_2
19 628 240 695 221 0
alu_3
19 664 312 731 293 0
alu_0
19 652 288 719 269 0
alu_1
11 732 264 759 166 0 1
22 648 192 724 172 0 \NUL
ALU Output
25 12 528 119 432
8 12 396 61 347 1 0
8 6 288 55 239 1 1
8 6 192 55 143 1 1
20 66 414 133 395 0
sel
20 60 210 127 191 0
clear
20 150 510 217 491 0
kpad_3
20 138 534 205 515 0
kpad_2
20 132 558 199 539 0
kpad_1
20 120 582 187 563 0
kpad_0
19 328 264 395 245 0
in1_2
19 316 240 383 221 0
in1_3
19 352 312 419 293 0
in1_0
19 340 288 407 269 0
in1_1
11 420 264 447 166 0 1
22 336 192 414 172 0 \NUL
ALU Input 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 166 264 233 245 0
kpad_2
19 154 240 221 221 0
kpad_3
19 190 312 257 293 0
kpad_0
19 178 288 245 269 0
kpad_1
11 258 264 285 166 0 1
22 150 192 249 172 0 \NUL
Keypad Output
22 12 144 117 124 0 \NUL
Clear Registers
22 18 324 100 304 0 \NUL
Store Select
20 60 294 127 275 0
update
22 12 240 121 220 0 \NUL
Update Register
19 484 264 551 245 0
in2_2
19 472 240 539 221 0
in2_3
19 508 312 575 293 0
in2_0
19 496 288 563 269 0
in2_1
11 576 264 603 166 0 1
22 492 192 570 172 0 \NUL
ALU Input 2
22 18 348 230 328 0 \NUL
0 = Keypad input, 1 = ALU result
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 228 450 478 430 0 \NUL
Select clear to initialize registers to 0.
22 228 474 557 454 0 \NUL
Select store select to choose which value to store.
22 228 498 508 478 0 \NUL
Choose read and write register addresses.
22 228 522 727 502 0 \NUL
Read addresses = reg sources of ALU inputs, Write address = reg to save to
22 228 546 480 526 0 \NUL
Press update to save value to register
22 228 594 668 574 0 \NUL
You are only permitted to modify the header comment on this page.
1 655 404 652 371
1 721 404 718 371
1 481 404 478 371
1 547 404 544 371
1 367 404 364 371
1 301 404 298 371
1 259 74 218 74
1 230 98 259 80
1 242 122 259 86
1 254 146 259 92
1 415 74 374 74
1 386 98 415 80
1 398 122 415 86
1 410 146 415 92
1 571 74 530 74
1 542 98 571 80
1 554 122 571 86
1 566 146 571 92
1 727 74 686 74
1 698 98 727 80
1 710 122 727 86
1 722 146 727 92
1 733 230 692 230
1 704 254 733 236
1 716 278 733 242
1 728 302 733 248
1 52 167 61 200
1 58 371 67 404
1 421 230 380 230
1 392 254 421 236
1 404 278 421 242
1 416 302 421 248
1 116 500 151 500
1 116 506 139 524
1 116 512 133 548
1 116 518 121 572
1 259 230 218 230
1 230 254 259 236
1 242 278 259 242
1 254 302 259 248
1 52 263 61 284
1 577 230 536 230
1 548 254 577 236
1 560 278 577 242
1 572 302 577 248
38 2
22 294 42 484 22 0 \NUL
Placeholder signal/recievers
22 18 480 388 460 0 \NUL
These are only present so circuit simulates without error
22 18 504 290 484 0 \NUL
Remove these once logic is implemented
22 18 528 266 508 0 \NUL
You are permitted to modify this page
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 315 236 482 216 0 \NUL
Work starts on next page
38 3
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 275 124 342 105 0
kpad_3
19 276 150 343 131 0
sel
19 278 99 345 80 0
alu_3
14 326 184 375 135
31 400 159 449 74 0 2
20 469 123 536 104 0
in_3
19 276 234 343 215 0
kpad_2
19 277 260 344 241 0
sel
19 279 209 346 190 0
alu_2
14 327 294 376 245
31 401 269 450 184 0 2
20 470 233 537 214 0
in_2
19 277 346 344 327 0
kpad_1
19 278 372 345 353 0
sel
19 280 321 347 302 0
alu_1
14 328 406 377 357
31 402 381 451 296 0 2
20 471 345 538 326 0
in_1
19 281 457 348 438 0
kpad_0
19 282 484 349 465 0
sel
19 284 433 351 414 0
alu_0
14 332 518 381 469
31 406 493 455 408 0 2
20 475 457 542 438 0
in_0
22 13 143 99 123 0 \NUL
Store Select:
22 235 42 745 22 0 \NUL
I used 4 muxes to find out whether to do kpad or alu. One for each binary digit.
1 401 155 372 159
1 340 140 401 143
1 339 114 401 119
1 342 89 401 113
1 402 265 373 269
1 341 250 402 253
1 340 224 402 229
1 343 199 402 223
1 403 377 374 381
1 342 362 403 365
1 341 336 403 341
1 344 311 403 335
1 407 489 378 493
1 346 474 407 477
1 345 447 407 453
1 348 423 407 447
1 446 113 470 113
1 447 223 471 223
1 448 335 472 335
1 452 447 476 447
38 4
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
24 528 560 577 488 1 1 1
19 446 581 513 562 0
init
19 366 550 433 531 0
up0
20 623 518 690 499 0
reg0_0
15 455 515 504 466
19 369 518 436 499 0
in_0
24 532 125 581 53 1 1 1
19 450 146 517 127 0
init
19 370 115 437 96 0
up0
20 634 83 701 64 0
reg0_3
15 459 80 508 31
19 362 78 429 59 0
in_3
24 541 257 590 185 1 1 1
19 459 278 526 259 0
init
19 379 247 446 228 0
up0
20 636 215 703 196 0
reg0_2
15 468 212 517 163
19 381 211 448 192 0
in_2
24 531 423 580 351 1 1 1
19 449 444 516 425 0
init
19 369 413 436 394 0
up0
20 626 381 693 362 0
reg0_1
15 458 378 507 329
19 371 375 438 356 0
in_1
5 137 214 186 165 0
20 194 199 261 180 0
init
19 15 199 82 180 0
clear
22 13 143 154 123 0 \NUL
Register 0 and Clear:
22 12 305 199 285 0 \NUL
I used 4 fliflops per register.
22 10 331 430 311 0 \NUL
Each flip flop only updates the main page if the button is pushed
22 12 356 205 336 0 \NUL
Each flipflop is a binary digit.
1 542 556 510 571
1 430 540 529 526
1 624 508 574 508
1 542 490 501 490
1 546 121 514 136
1 434 105 533 91
1 635 73 578 73
1 546 55 505 55
1 555 253 523 268
1 443 237 542 223
1 637 205 587 205
1 555 187 514 187
1 545 419 513 434
1 433 403 532 389
1 627 371 577 371
1 545 353 504 353
1 426 68 533 73
1 445 201 542 205
1 435 365 532 371
1 433 508 529 508
1 195 189 183 189
1 79 189 138 189
38 5
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
24 519 120 568 48 1 1 1
19 437 141 504 122 0
init
19 378 107 445 88 0
up1
20 614 78 681 59 0
reg1_3
15 446 75 495 26
19 371 67 438 48 0
in_3
24 521 256 570 184 1 1 1
19 439 277 506 258 0
init
19 394 248 461 229 0
up1
20 616 214 683 195 0
reg1_2
15 448 211 497 162
19 388 210 455 191 0
in_2
24 524 382 573 310 1 1 1
19 442 403 509 384 0
init
19 387 370 454 351 0
up1
20 619 340 686 321 0
reg1_1
15 451 337 500 288
19 375 338 442 319 0
in_1
24 521 519 570 447 1 1 1
19 439 540 506 521 0
init
19 421 510 488 491 0
up1
20 616 477 683 458 0
reg1_0
15 448 474 497 425
19 411 475 478 456 0
in_0
22 13 143 88 123 0 \NUL
Register 1:
1 533 116 501 131
1 442 97 520 86
1 615 68 565 68
1 533 50 492 50
1 535 252 503 267
1 458 238 522 222
1 617 204 567 204
1 535 186 494 186
1 538 378 506 393
1 451 360 525 348
1 620 330 570 330
1 538 312 497 312
1 535 515 503 530
1 485 500 522 485
1 617 467 567 467
1 535 449 494 449
1 435 57 520 68
1 452 200 522 204
1 439 328 525 330
1 475 465 522 467
38 6
24 528 560 577 488 1 1 1
19 446 581 513 562 0
init
19 366 550 433 531 0
up2
20 623 518 690 499 0
reg2_0
15 455 515 504 466
19 385 517 452 498 0
in_0
24 532 125 581 53 1 1 1
19 450 146 517 127 0
init
19 370 115 437 96 0
up2
20 625 83 692 64 0
reg2_3
15 459 80 508 31
19 379 75 446 56 0
in_3
24 541 257 590 185 1 1 1
19 459 278 526 259 0
init
19 379 247 446 228 0
up2
20 636 215 703 196 0
reg2_2
15 468 212 517 163
19 375 212 442 193 0
in_2
24 531 423 580 351 1 1 1
19 449 444 516 425 0
init
19 369 413 436 394 0
up2
20 626 381 693 362 0
reg2_1
15 458 378 507 329
19 367 382 434 363 0
in_1
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 13 143 88 123 0 \NUL
Register 2:
1 542 556 510 571
1 430 540 529 526
1 624 508 574 508
1 542 490 501 490
1 546 121 514 136
1 434 105 533 91
1 626 73 578 73
1 546 55 505 55
1 555 253 523 268
1 443 237 542 223
1 637 205 587 205
1 555 187 514 187
1 545 419 513 434
1 433 403 532 389
1 627 371 577 371
1 545 353 504 353
1 443 65 533 73
1 439 202 542 205
1 431 372 532 371
1 449 507 529 508
38 7
24 528 560 577 488 1 1 1
19 446 581 513 562 0
init
19 366 550 433 531 0
up3
20 623 518 690 499 0
reg3_0
15 455 515 504 466
19 369 515 436 496 0
in_0
24 532 125 581 53 1 1 1
19 450 146 517 127 0
init
19 370 115 437 96 0
up3
20 625 83 692 64 0
reg3_3
15 459 80 508 31
19 384 82 451 63 0
in_3
24 541 257 590 185 1 1 1
19 459 278 526 259 0
init
19 379 247 446 228 0
up3
20 636 215 703 196 0
reg3_2
15 468 212 517 163
19 377 211 444 192 0
in_2
24 531 423 580 351 1 1 1
19 449 444 516 425 0
init
19 369 413 436 394 0
up3
20 626 381 693 362 0
reg3_1
15 458 378 507 329
19 376 382 443 363 0
in_1
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
22 13 143 88 123 0 \NUL
Register 3:
1 542 556 510 571
1 430 540 529 526
1 624 508 574 508
1 542 490 501 490
1 546 121 514 136
1 434 105 533 91
1 626 73 578 73
1 546 55 505 55
1 555 253 523 268
1 443 237 542 223
1 637 205 587 205
1 555 187 514 187
1 545 419 513 434
1 433 403 532 389
1 627 371 577 371
1 545 353 504 353
1 448 72 533 73
1 441 201 542 205
1 440 372 532 371
1 433 505 529 508
38 8
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 226 144 293 125 0
update
20 549 177 616 158 0
up0
19 223 212 290 193 0
wadr_0
5 308 190 357 141 0
19 220 175 287 156 0
wadr_1
5 309 230 358 181 0
3 469 190 518 141 1 0
19 221 359 288 340 0
update
20 544 392 611 373 0
up2
19 219 419 286 400 0
wadr_0
5 299 435 348 386 0
19 222 389 289 370 0
wadr_1
3 464 405 513 356 1 0
19 223 245 290 226 0
update
20 546 278 613 259 0
up1
19 226 307 293 288 0
wadr_0
19 222 275 289 256 0
wadr_1
5 307 289 356 240 0
3 466 291 515 242 1 0
19 224 458 291 439 0
update
20 547 491 614 472 0
up3
19 224 517 291 498 0
wadr_0
19 226 488 293 469 0
wadr_1
3 467 504 516 455 1 0
22 13 143 198 123 0 \NUL
Write Register Select Logic:
22 226 50 634 30 0 \NUL
I used a sum of products to figure out which register to update.
22 226 76 432 56 0 \NUL
up0 being register 0 and so on.
1 290 134 470 151
1 354 165 470 165
1 355 205 470 179
1 515 165 550 167
1 285 349 465 366
1 283 409 300 410
1 510 380 545 382
1 287 235 467 252
1 286 265 308 264
1 512 266 547 268
1 288 448 468 465
1 513 479 548 481
1 353 264 467 266
1 467 280 290 297
1 284 165 309 165
1 287 202 310 205
1 286 379 465 380
1 345 410 465 394
1 290 478 468 479
1 468 493 288 507
38 9
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
20 447 74 514 55 0
in1_3
19 211 40 278 21 0
reg3_3
19 224 146 291 127 0
adr1_0
19 215 124 282 105 0
adr1_1
31 352 113 401 28 0 1
14 294 162 343 113
19 209 61 276 42 0
reg2_3
19 209 81 276 62 0
reg1_3
19 210 100 277 81 0
reg0_3
20 440 227 507 208 0
in1_2
19 204 193 271 174 0
reg3_2
19 217 299 284 280 0
adr1_0
19 208 277 275 258 0
adr1_1
31 345 266 394 181 0 1
14 293 318 342 269
19 202 214 269 195 0
reg2_2
19 202 234 269 215 0
reg1_2
19 203 253 270 234 0
reg0_2
20 447 378 514 359 0
in1_1
19 211 344 278 325 0
reg3_1
19 224 449 291 430 0
adr1_0
19 215 428 282 409 0
adr1_1
31 352 417 401 332 0 1
14 291 477 340 428
19 209 365 276 346 0
reg2_1
19 209 385 276 366 0
reg1_1
19 210 404 277 385 0
reg0_1
20 692 484 759 465 0
in1_0
19 421 445 488 426 0
reg3_0
19 434 551 501 532 0
adr1_0
19 425 529 492 510 0
adr1_1
31 597 523 646 438 0 1
14 535 581 584 532
19 419 466 486 447 0
reg2_0
19 419 486 486 467 0
reg1_0
19 420 505 487 486 0
reg0_0
22 13 143 124 123 0 \NUL
Read Address 1:
22 14 166 92 146 0 \NUL
ALU Input 1
22 477 123 779 103 0 \NUL
I used 4 muxes for each digit of the ALU input.
22 386 148 782 128 0 \NUL
Which register's digit to use is decided by the read address 
1 353 55 275 30
1 340 137 353 109
1 448 64 398 67
1 279 114 353 91
1 353 97 288 136
1 353 61 273 51
1 353 67 273 71
1 353 73 274 90
1 346 208 268 183
1 339 293 346 262
1 441 217 391 220
1 272 267 346 244
1 346 250 281 289
1 346 214 266 204
1 346 220 266 224
1 346 226 267 243
1 353 359 275 334
1 337 452 353 413
1 448 368 398 371
1 279 418 353 395
1 353 401 288 439
1 353 365 273 355
1 353 371 273 375
1 353 377 274 394
1 598 465 485 435
1 581 556 598 519
1 693 474 643 477
1 489 519 598 501
1 598 507 498 541
1 598 471 483 456
1 598 477 483 476
1 598 483 484 495
38 10
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
20 447 74 514 55 0
in2_3
19 211 40 278 21 0
reg3_3
19 224 146 291 127 0
adr2_0
19 215 124 282 105 0
adr2_1
31 352 113 401 28 0 1
14 294 162 343 113
19 209 61 276 42 0
reg2_3
19 209 81 276 62 0
reg1_3
19 210 100 277 81 0
reg0_3
20 440 227 507 208 0
in2_2
19 204 193 271 174 0
reg3_2
19 217 299 284 280 0
adr2_0
19 208 277 275 258 0
adr2_1
31 345 266 394 181 0 1
14 293 318 342 269
19 202 214 269 195 0
reg2_2
19 202 234 269 215 0
reg1_2
19 203 253 270 234 0
reg0_2
20 447 378 514 359 0
in2_1
19 211 344 278 325 0
reg3_1
19 224 449 291 430 0
adr2_0
19 215 428 282 409 0
adr2_1
31 352 417 401 332 0 1
14 291 477 340 428
19 209 365 276 346 0
reg2_1
19 209 385 276 366 0
reg1_1
19 210 404 277 385 0
reg0_1
20 692 484 759 465 0
in2_0
19 421 445 488 426 0
reg3_0
19 434 551 501 532 0
adr2_0
19 425 529 492 510 0
adr2_1
31 597 523 646 438 0 1
14 535 581 584 532
19 419 466 486 447 0
reg2_0
19 419 486 486 467 0
reg1_0
19 420 505 487 486 0
reg0_0
22 13 143 124 123 0 \NUL
Read Address 2:
22 14 166 92 146 0 \NUL
ALU Input 2
22 531 135 745 115 0 \NUL
Same thing just uses address 2.
1 353 55 275 30
1 340 137 353 109
1 448 64 398 67
1 279 114 353 91
1 353 97 288 136
1 353 61 273 51
1 353 67 273 71
1 353 73 274 90
1 346 208 268 183
1 339 293 346 262
1 441 217 391 220
1 272 267 346 244
1 346 250 281 289
1 346 214 266 204
1 346 220 266 224
1 346 226 267 243
1 353 359 275 334
1 337 452 353 413
1 448 368 398 371
1 279 418 353 395
1 353 401 288 439
1 353 365 273 355
1 353 371 273 375
1 353 377 274 394
1 598 465 485 435
1 581 556 598 519
1 693 474 643 477
1 489 519 598 501
1 598 507 498 541
1 598 471 483 456
1 598 477 483 476
1 598 483 484 495
38 11
22 12 78 52 58 0 \NUL
Lab 2
22 12 102 149 82 0 \NUL
CSE 12, Spring 2021
22 12 30 85 10 0 \NUL
Gu, James
22 12 54 40 34 0 \NUL
jjgu
19 359 144 426 125 0
in2_0
19 360 122 427 103 0
in2_1
19 363 51 430 32 0
in1_1
19 362 31 429 12 0
in1_0
19 364 92 431 73 0
in1_3
19 363 71 430 52 0
in1_2
20 670 90 737 71 0
alu_3
31 581 126 630 41 0 1
14 537 168 586 119
19 347 290 414 271 0
in2_0
19 348 268 415 249 0
in2_1
19 351 197 418 178 0
in1_0
19 350 177 417 158 0
in1_3
19 352 238 419 219 0
in1_2
19 351 217 418 198 0
in1_1
20 657 236 724 217 0
alu_2
31 569 272 618 187 0 1
14 515 315 564 266
19 334 433 401 414 0
in2_0
19 335 411 402 392 0
in2_1
19 338 340 405 321 0
in1_3
19 337 320 404 301 0
in1_2
19 339 381 406 362 0
in1_1
19 338 360 405 341 0
in1_0
20 645 379 712 360 0
alu_1
31 556 415 605 330 0 1
14 505 453 554 404
19 330 570 397 551 0
in2_0
19 331 548 398 529 0
in2_1
19 334 477 401 458 0
in1_2
19 333 457 400 438 0
in1_1
19 335 518 402 499 0
in1_0
19 334 497 401 478 0
in1_3
20 641 516 708 497 0
alu_0
31 552 552 601 467 0 1
14 501 590 550 541
22 13 143 93 123 0 \NUL
ALU Output:
22 12 192 243 172 0 \NUL
For the ALU output I used 4 muxes.
22 12 217 298 197 0 \NUL
The last two binary digits for ALU input 2 is 
22 14 242 242 222 0 \NUL
how much to rotate the ALU input 1
22 13 266 214 246 0 \NUL
For example, if input 1 is 1001
22 13 291 319 271 0 \NUL
the output will effectively be rotated 1 time (01)
22 12 314 260 294 0 \NUL
even if the actual rotation needs to be
22 11 337 136 317 0 \NUL
rotated nine times.
22 13 360 301 340 0 \NUL
For a 4 bit number, a 1 bit rotation results in
22 12 383 250 363 0 \NUL
the same number as a 9 bit rotation.
1 426 21 582 68
1 427 41 582 74
1 427 61 582 80
1 428 82 582 86
1 627 80 671 80
1 582 122 583 143
1 582 104 424 112
1 423 134 582 110
1 414 167 570 214
1 415 187 570 220
1 415 207 570 226
1 416 228 570 232
1 615 226 658 226
1 570 268 561 290
1 570 250 412 258
1 411 280 570 256
1 401 310 557 357
1 402 330 557 363
1 402 350 557 369
1 403 371 557 375
1 602 369 646 369
1 557 411 551 428
1 557 393 399 401
1 398 423 557 399
1 397 447 553 494
1 398 467 553 500
1 398 487 553 506
1 399 508 553 512
1 598 506 642 506
1 553 548 547 565
1 553 530 395 538
1 394 560 553 536
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
